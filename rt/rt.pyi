import typing
from typing import Any, Optional

__docformat__: str
__authors__: typing.List[str]
DEFAULT_QUEUE: str
ALL_QUEUES: Any
DEBUG_MODE: bool

class RtError(Exception): ...
class AuthorizationError(RtError): ...
class NotAllowed(RtError): ...
class UnexpectedResponse(RtError): ...
class UnexpectedMessageFormat(RtError): ...
class APISyntaxError(RtError): ...
class InvalidUse(RtError): ...
class BadRequest(RtError): ...

class ConnectionError(RtError):
    cause: Any = ...
    def __init__(self, message: str, cause: Exception) -> None: ...

class InvalidQueryError(RtError): ...

class Rt:
    RE_PATTERNS: Any = ...
    url: Any = ...
    debug_mode: Any = ...
    default_login: Any = ...
    default_password: Any = ...
    default_queue: Any = ...
    login_result: Any = ...
    session: Any = ...
    def __init__(self, url: str, default_login: Optional[str] = ..., default_password: Optional[str] = ..., proxy: Optional[str] = ..., default_queue: str = ..., basic_auth: Optional[typing.Tuple[str, str]] = ..., digest_auth: Optional[typing.Tuple[str, str]] = ..., skip_login: bool = ..., verify_cert: typing.Optional[typing.Union[str, bool]] = ..., debug_mode: bool = ...) -> None: ...
    def login(self, login: Optional[str] = ..., password: Optional[str] = ...) -> bool: ...
    def logout(self) -> bool: ...
    def new_correspondence(self, queue: Optional[typing.Union[str, ALL_QUEUES]] = ...) -> typing.List[dict]: ...
    def last_updated(self, since: str, queue: Optional[typing.Union[str, ALL_QUEUES]] = ...) -> typing.List[dict]: ...
    def search(self, Queue: Optional[typing.Union[str, ALL_QUEUES]] = ..., order: Optional[str] = ..., raw_query: Optional[str] = ..., Format: str = ..., **kwargs: Any) -> typing.List[dict]: ...
    def get_ticket(self, ticket_id: typing.Union[str, int]) -> typing.Optional[dict]: ...
    def create_ticket(self, Queue: Optional[str] = ..., files: typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]] = ..., **kwargs: Any) -> int: ...
    def edit_ticket(self, ticket_id: typing.Union[str, int], **kwargs: Any) -> bool: ...
    def get_history(self, ticket_id: typing.Union[str, int], transaction_id: Optional[typing.Union[str, int]] = ...) -> typing.Optional[typing.List[dict]]: ...
    def get_short_history(self, ticket_id: typing.Union[str, int]) -> typing.Optional[typing.List[typing.Tuple[int, str]]]: ...
    def reply(self, ticket_id: typing.Union[str, int], text: str = ..., cc: str = ..., bcc: str = ..., content_type: str = ..., files: typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]] = ...) -> bool: ...
    def comment(self, ticket_id: typing.Union[str, int], text: str = ..., cc: str = ..., bcc: str = ..., content_type: str = ..., files: typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]] = ...) -> bool: ...
    def get_attachments(self, ticket_id: typing.Union[str, int]) -> typing.Optional[typing.List[typing.Tuple[str, str, str, str]]]: ...
    def get_attachments_ids(self, ticket_id: typing.Union[str, int]) -> typing.Optional[typing.List[int]]: ...
    def get_attachment(self, ticket_id: typing.Union[str, int], attachment_id: typing.Union[str, int]) -> typing.Optional[dict]: ...
    def get_attachment_content(self, ticket_id: typing.Union[str, int], attachment_id: typing.Union[str, int]) -> typing.Optional[bytes]: ...
    def get_user(self, user_id: typing.Union[str, int]) -> typing.Optional[typing.Dict[str, str]]: ...
    def create_user(self, Name: str, EmailAddress: str, **kwargs: Any) -> typing.Union[int, bool]: ...
    def edit_user(self, user_id: typing.Union[str, int], **kwargs: Any) -> typing.Union[int, bool]: ...
    def get_queue(self, queue_id: typing.Union[str, int]) -> typing.Optional[typing.Dict[str, str]]: ...
    def edit_queue(self, queue_id: typing.Union[str, int], **kwargs: Any) -> typing.Union[str, bool]: ...
    def create_queue(self, Name: str, **kwargs: Any) -> int: ...
    def get_links(self, ticket_id: typing.Union[str, int]) -> typing.Optional[typing.Dict[str, typing.List[str]]]: ...
    def edit_ticket_links(self, ticket_id: typing.Union[str, int], **kwargs: Any) -> bool: ...
    def edit_link(self, ticket_id: typing.Union[str, int], link_name: str, link_value: typing.Union[str, int], delete: bool = ...) -> bool: ...
    def merge_ticket(self, ticket_id: typing.Union[str, int], into_id: typing.Union[str, int]) -> bool: ...
    def take(self, ticket_id: typing.Union[str, int]) -> bool: ...
    def steal(self, ticket_id: typing.Union[str, int]) -> bool: ...
    def untake(self, ticket_id: typing.Union[str, int]) -> bool: ...
    @staticmethod
    def split_header(line: str) -> typing.Sequence[str]: ...
